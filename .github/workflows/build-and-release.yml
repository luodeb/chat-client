name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Is this a pre-release?'
        required: false
        type: boolean
        default: false

env:
  CARGO_INCREMENTAL: 0
  RUST_BACKTRACE: short

jobs:
  create-release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Get version
        run: echo "PACKAGE_VERSION=$(node -pe "require('./package.json').version")" >> $GITHUB_ENV

      - name: Create release
        id: create-release
        uses: actions/github-script@v7
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `${{ github.event.inputs.version || github.ref_name }}`,
              name: `Chat Client v${{ env.PACKAGE_VERSION }}`,
              body: 'Release created by GitHub Actions. See the assets below to download and install.',
              draft: true,
              prerelease: ${{ github.event.inputs.prerelease || 'false' }}
            })
            return data.id

  build-tauri:
    needs: create-release
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target universal-apple-darwin'
            target: 'universal-apple-darwin'
            arch: 'universal'
          - platform: 'ubuntu-22.04'
            args: ''
            target: 'x86_64-unknown-linux-gnu'
            arch: 'x86_64'
          - platform: 'windows-latest'
            args: ''
            target: 'x86_64-pc-windows-msvc'
            arch: 'x86_64'

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || matrix.target }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'
          key: ${{ matrix.platform }}-${{ matrix.target }}-release

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install frontend dependencies
        run: pnpm install --frozen-lockfile

      - name: Build frontend
        run: pnpm build

      - name: Build workspace (plugins)
        run: |
          cd src-tauri
          cargo build --workspace --release

      - name: Build Tauri app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}
          args: ${{ matrix.args }}
          includeUpdaterJson: true

  build-plugins:
    needs: create-release
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            target: 'universal-apple-darwin'
            lib_name: 'libexample.dylib'
            arch: 'universal'
            file_extension: 'dylib'
          - platform: 'ubuntu-22.04'
            target: 'x86_64-unknown-linux-gnu'
            lib_name: 'libexample.so'
            arch: 'x86_64'
            file_extension: 'so'
          - platform: 'windows-latest'
            target: 'x86_64-pc-windows-msvc'
            lib_name: 'example.dll'
            arch: 'x86_64'
            file_extension: 'dll'

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || matrix.target }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'
          key: ${{ matrix.platform }}-${{ matrix.target }}-plugins

      - name: Build example plugin
        shell: bash
        run: |
          cd src-tauri
          if [ "${{ matrix.platform }}" = "macos-latest" ]; then
            # Build for both architectures and create universal binary
            cargo build --release --target aarch64-apple-darwin -p example-plugin
            cargo build --release --target x86_64-apple-darwin -p example-plugin
            lipo -create -output target/release/${{ matrix.lib_name }} \
              target/aarch64-apple-darwin/release/${{ matrix.lib_name }} \
              target/x86_64-apple-darwin/release/${{ matrix.lib_name }}
          else
            cargo build --release --target ${{ matrix.target }} -p example-plugin
            # File is already in the correct location: src-tauri/target/${{ matrix.target }}/release/${{ matrix.lib_name }}
          fi

      - name: List built files (debug)
        shell: bash
        run: |
          echo "Contents of src-tauri/target/release:"
          ls -la src-tauri/target/release/ || echo "release directory not found"
          echo "Contents of src-tauri/target/${{ matrix.target }}/release:"
          ls -la src-tauri/target/${{ matrix.target }}/release/ || echo "target-specific directory not found"

      - name: Upload plugin to release
        uses: actions/github-script@v7
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            let assetPath;
            if ('${{ matrix.platform }}' === 'macos-latest') {
              assetPath = 'src-tauri/target/release/${{ matrix.lib_name }}';
            } else {
              assetPath = 'src-tauri/target/${{ matrix.target }}/release/${{ matrix.lib_name }}';
            }
            const assetName = 'example-plugin-${{ matrix.arch }}.${{ matrix.file_extension }}';

            const uploadUrl = `https://uploads.github.com/repos/${context.repo.owner}/${context.repo.repo}/releases/${{ needs.create-release.outputs.release_id }}/assets{?name,label}`;

            const stats = fs.statSync(assetPath);
            const fileSizeInBytes = stats.size;
            const fileContent = fs.readFileSync(assetPath);

            await github.rest.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${{ needs.create-release.outputs.release_id }},
              name: assetName,
              data: fileContent
            });

  publish-release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs: [create-release, build-tauri, build-plugins]

    steps:
      - name: Publish release
        id: publish-release
        uses: actions/github-script@v7
        env:
          release_id: ${{ needs.create-release.outputs.release_id }}
        with:
          script: |
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.release_id,
              draft: false
            })
